components:
  schemas:
    AbstractDataEnvelope:
      required:
        - sourceType
      discriminator:
        propertyName: sourceType
      properties:
        sourceType:
          type: string
          enum: ['SensorWebDataEnvelope', 'CopernicusDataEnvelope', 'GdiDeDataEnvelope']
          description: |
            shall be used to determine the responsible data backend
        areaOfInterest:
          type: object
          required:
            - extent
          properties:
            extent:
              description: |
                the coordinates, using EPSG:4326, (in analogy to GeoJSON bbox) in the order
                "southwesterly point followed by more northeasterly point". Schema
                is [minLon, minLat, maxLon, maxLat]
              type: array
              minItems: 4
              maxItems: 4
              items:
                type: number
                format: float
                minimum: -180.0
                maximum: 180.0
        timeFrame:
          type: object
          description:
            time frame the dataset covers
          required:
            - startTime
            - endTime
          properties:
            startTime:
              type: string
              format: date-time
              description: |
                the beginning of the time frame
            endTime:
              type: string
              format: date-time
              description: |
                the ending of the time frame
          format: date-time
        created:
          type: string
          format: date-time
          description: |
            time on which the dataset was created or became available
        modified:
          type: string
          format: date-time
          description: |
            time on which the dataset was modified last
    SensorWebDataEnvelope:
      allOf:
        - $ref: '#/components/schemas/AbstractDataEnvelope'
        - type: object
          required:
          - offering
          - featureOfInterest
          - observedProperty
          - procedure
          - serviceUrl
          properties:
            serviceUrl:
              type: string
            offering:
              type: string
            featureOfInterest:
              type: string
            observedProperty:
              type: string
            procedure:
              type: string
    CopernicusDataEnvelope:
      allOf:
        - $ref: '#/components/schemas/AbstractDataEnvelope'
        - type: object
          required:
          - datasetId
          - satellite
          - cloudCoverage
          - portal
          properties:
            datasetId:
              description:
                the id of the
            satellite:
              type: string
              enum: [sentinel-1, sentinel-2, sentinel-3]
            cloudCoverage:
              type: number
              format: float
            portal:
              type: string
              enum: [Code-DE, Sentinel-Hub]
    GdiDeDataEnvelope:
      allOf:
        - $ref: '#/components/schemas/AbstractDataEnvelope'
        - type: object
          required:
          - recordRefId
          properties:
            catalougeUrl:
              description: |
                URL of the GDI-DE catalogue
              type: string
            recordRefId:
              description: |
                the id of the dataset within the GDI-DE catalogue
              type: string
    AbstractResource:
      properties:
        url:
          type: string
        method:
          type: string
          enum: ['GetResource', 'PostResource']
      discriminator:
        propertyName: method
      required:
        - method
        - url
    PostResource:
      allOf:
        - $ref: '#/components/schemas/AbstractResource'
        - type: object
          required:
          - body
          - contentType
          properties:
            body:
              type: string
            contentType:
              type: string
    GetResource:
      allOf:
        - $ref: '#/components/schemas/AbstractResource'
    PaginatedResponse:
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
    PaginatedWacodisJobDefinitionResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          required:
          - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/WacodisJobDefinition'
    WacodisJobDefinition:
      required:
        - name
        - areaOfInterest
        - processingTool
        - inputs
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: |
            a human friendly short name
        description:
          type: string
          description: |
            a more verbose description of the WacodisJobDefinitions (e.g. purpose, inputs, ...)
        useCase:
          type: string
          description: |
            A generic use case reference. This can be used to refer to the use cases identified during the
            initial phase of WaCoDiS
        created:
          type: string
          format: date-time
        timeInterval:
          type: string
          format: duration
          description: |
            if present, this describe the recurrency of a WacodisJobDefinition. if not present, the WacodisJobDefinition is treated as a one-time WacodisJobDefinition
        areaOfInterest:
          type: object
          required:
            - extent
          properties:
            extent:
              description: |
                the coordinates, using EPSG:4326, (in analogy to GeoJSON bbox) in the order
                "southwesterly point followed by more northeasterly point". Schema
                is [minLon, minLat, maxLon, maxLat]
              type: array
              minItems: 4
              maxItems: 4
              items:
                type: number
                format: float
                minimum: -180.0
                maximum: 180.0
        processingTool:
          type: string
          description: |
            the processingTool ID as provided by the WPS tool wrapper
        inputs:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AbstractSubsetDefinition'
    AbstractSubsetDefinition:
      properties:
        sourceType:
          type: string
          # the discriminator needs to have the same value as the schema objects name. this works at least
          # with spring generator and jackson deserialization
          enum: ['SensorWebSubsetDefinition', 'CopernicusSubsetDefinition', 'GdiDeSubsetDefinition']
          description: |
            shall be used to determine the responsible data backend
      discriminator:
        propertyName: sourceType
      required:
        - sourceType
    SensorWebSubsetDefinition:
      allOf:
        - $ref: '#/components/schemas/AbstractSubsetDefinition'
        - type: object
          required:
          - offering
          - featureOfInterest
          - observedProperty
          - procedure
          properties:
            offering:
              type: string
            featureOfInterest:
              type: string
            observedProperty:
              type: string
            procedure:
              type: string
    CopernicusSubsetDefinition:
      allOf:
        - $ref: '#/components/schemas/AbstractSubsetDefinition'
        - type: object
          required:
          - satellite
          - maximumCloudCoverage
          properties:
            satellite:
              type: string
              enum: [sentinel-1, sentinel-2, sentinel-3]
            maximumCloudCoverage:
              type: number
              format: float
    GdiDeSubsetDefinition:
      allOf:
        - $ref: '#/components/schemas/AbstractSubsetDefinition'
        - type: object
          required:
          - catalogueId
          properties:
            catalogueId:
              description: |
                the id of the dataset within the GDI-DE catalogue
              type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
